package org.xvm.proto.op;

import org.xvm.proto.Frame;
import org.xvm.proto.ObjectHandle;
import org.xvm.proto.ObjectHandle.ExceptionHandle;
import org.xvm.proto.Op;

import org.xvm.proto.template.xTuple.TupleHandle;

/**
 * RETURN_T rvalue-tuple ; return (a tuple of return values)
 *
 * (generated by the compiler when the current function has a multi-return, but the
 *  specified register is a tuple)
 *
 * @author gg 2017.03.08
 */
public class Return_T extends Op
    {
    private final int f_nArgValue;

    public Return_T(int nValue)
        {
        f_nArgValue = nValue;
        }

    @Override
    public int process(Frame frame, int iPC)
        {
        int iRet = frame.f_iReturn;
        if (iRet >= 0)
            {
            throw new IllegalStateException(); // assertion
            }

        switch (iRet)
            {
            case Frame.R_LOCAL:
                throw new IllegalStateException(); // assertion

            case Frame.R_UNUSED:
                break;

            case Frame.R_MULTI:
                TupleHandle hTuple;
                try
                    {
                    hTuple = (TupleHandle) frame.getArgument(f_nArgValue);
                    }
                catch (ExceptionHandle.WrapperException e)
                    {
                    frame.m_hException = e.getExceptionHandle();
                    return R_EXCEPTION;
                    }

                if (hTuple == null)
                    {
                    // TODO: block
                    throw new UnsupportedOperationException();
                    }

                int[] aiRet = frame.f_aiReturn;
                ObjectHandle[] ahValue = hTuple.m_ahValue;

                // it's possible that the caller doesn't care about some of the return values
                for (int i = 0, c = aiRet.length; i < c; i++)
                    {
                    frame.f_framePrev.forceValue(aiRet[i], ahValue[i]);
                    }

                break;

            default:
                // pass the tuple "as is"
                frame.returnValue(-iRet - 1, f_nArgValue);
                break;
            }
        return R_RETURN;
        }
    }
