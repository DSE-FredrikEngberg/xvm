+ super() method call

+ Service
        - cleanup an un-referenced service (phantom refs?)
        +/- container terminates when all services are stopped

+ Function wrapping for services
+ Get/Set on the service

+ Matching the function/method return value with a Ref

+ FutureRef async completion handling

+ Atomics

+ Vars as "deferrable" registers

+ Arrays, Generic types

+ Refs to array elements

+ Refs to method arguments

+ DaemonPool scheduling - "native" stack implementation

+ Tuple, ConditionalTuple

+ Tuple construction - new TVAR, SVAR op-codes

+ Service reentrancy, timeouts and Fibers

+ injection

+ native Service methods

+ Multi:
    +- new
    +- call
    +- invoke

+ try-finally

=== compilation issues
    - constructor, finalizer, default constructor
    - properties not defined by the class declarations (e.g. class TestClass(String prop1))
    - "extend" contribution is not resolved
    = module inside "x" - NPE in MethodDeclarationStatement.registerStruct (container is null)
    - giving a wrong name to "construct" of a const class throws an assert

+ op-code serialization/deserialization

- Const

- introduce "native super" in ClassTemplate to allow Object -> MyClass -> MyService inheritance

- a new DVAR like op-code to provide additional parameters (e.g. injection name)

- Property and Method

- Class, Type

$$$$$$$$$$ DEFERRED ISSUES $$$$$$$$$$$$$$$

- TypeSet and TypeComposition could be mutated by different threads
    (hence the use of ConcurrentHashMap in TypeSet and synchronization in TypeComposition)