- add a ReentrantLock for the ServiceContext to allow for an optimistic (message-less) context switch
    - DaemonPool to acquire the lock prior to nextFiber() call
    - ServiceContext.sendXyz() to set a target ServiceContext reference that would be used by
      DaemonPool to attempt to switch to another context
    - native code should be able to tryLock another context for a quick operation
      (e.g. Buffer<Byte> to be locked by a FileChannel)

- Stack overflow (fiber depth + frame depth within a fiber or cross-fiber frame depth)

- createConst() processing for Set, Map etc.

- Property and Method native implementation

- Class, Type native implementation

- a new VAR_D like op-code to provide additional parameters (e.g. injection name)

- introduce stock exception (Bounds, IllegalState, etc.) and use current frame to
  create exceptions

- Type: by-method comparison

- Move op-code: "safe wrapper" logic

- ServiceContext - the "register..." APIs are "fiber local" -- unless called from the outside

- TypeInfo.findCallable() - use the same approach as Expression.findMethod()

- ast.Annotation - use the InvocationExpression's approach for argument validation

- native optimization Stringable methods on xInt*, xUInt*, etc.

- consider a FormalTypeConstant instead of TerminalType(PropertyConstant)

-- tuple support
   - InvocationExpression - needs to generate _xT ops (i.e. it must be able to testFit & validate for a tuple type)
   - verify (and test) the logic in ReturnStatement that gens RETURN_T
   - assignment w/ multi-LVal needs to testFit for Tuple if testFit for multi fails
     (and use Expression.packedExpression and unpackedExpressions for code gen?)

- finish nesting call chain support

- heap.getType() vs. Constant.getType()

- Lazy property on an immutable object must not produce a mutable value

- compiler to verify that const properties are Orderable

- compiler to verify "all or nothing" implementation for funky interfaces

- formal types with .is() should be smarter at compile time

module TestSimple.xqiz.it
    {
    @Inject X.io.Console console;

    void run()
        {
        import Ecstasy.collections.HashMap;
        Map m = new HashMap<String, Int>();
        // TODO GG SHOULD BE COMPILER ERROR (Type cannot be String)
        console.print($"m.KeyType.is(String)={m.KeyType.is(String)}");
        // TODO GG SHOULD BE COMPILER WARNING (right side is not Type)
        console.print($"m.KeyType.is(Stringable)={m.KeyType.is(Stringable)}");
        }
    }

$$$$$$$$$$ DEFERRED ISSUES $$$$$$$$$$$$$$$

- TemplateRegistry and TypeComposition could be mutated by different threads
    (hence the use of ConcurrentHashMap in TemplateRegistry and synchronization in TypeComposition)

