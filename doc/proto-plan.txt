+ super() method call

+ Service
        - cleanup an un-referenced service (phantom refs?)
        +/- container terminates when all services are stopped

+ Function wrapping for services
+ Get/Set on the service

+ Matching the function/method return value with a Ref

+ FutureRef async completion handling

+ Atomics

+ Vars as "deferrable" registers

+ Arrays, Generic types

+ Refs to array elements

+ Refs to method arguments

+ DaemonPool scheduling - "native" stack implementation

+ Tuple, ConditionalTuple

+ Tuple construction - new TVAR, SVAR op-codes

+ Service reentrancy, timeouts and Fibers

+ injection

+ native Service methods

+ Multi:
    +- new
    +- call
    +- invoke

+ try-finally

=== compilation issues
    - constructor, finalizer, default constructor
    - properties not defined by the class declarations (e.g. class TestClass(String prop1))
    - giving a wrong name to the "construct" method is ignored

+ op-code serialization/deserialization

+ introduce "native super" in ClassTemplate to allow Object -> MyClass -> MyService inheritance

+ Const

+ hash implementation

+ revisit hash and to<String> implementation

+ change the continuation API

+ implement missing enum methods

+ mixin processing

+ revisit PreInc, PostInc; add Inc, Dec ops

+ use of the MethodSignature instead of MethodConstant

+ re-work ops:
    + Merge Ref and MoveRef
    + Move, Ref - allow next unallocated register;
    + allow local property for Invoke_*
    + allow next register and local property for GP_Add, GP_NEG
    + allow local property for Call_*
    + allow local property for PIP_*
    + allow local property for Call_* and Invoke_* returns
    + allow local property for l-values (assignValue)
    + allow next register for *GET
    + allow local property for IS_*
    + allow local property for JMP_*
    + allow local property for GP_*
    + allow local property for IP_*
    + allow local property for IIP_*
    + allow next register for IS_*
    + allow next register for Invoke_*
    + allow next register for Call_*

+ change tests using "local property" mode

+ access exchange (public vs private vs struct) during invocations

+ change VAR_S to be consistent with VAR_T op (TYPE = Sequence type)

+ createConst() processing for Array

- createConst() processing for Set, Map etc.

- a test for auto-narrowing method invocation

- Property and Method

- Class, Type

- a new VAR_D like op-code to provide additional parameters (e.g. injection name)

- introduce stock exception (Bounds, IllegalState, etc.)

- Type: by-method comparison
- Move: "safe wrapper" logic


$$$$$$$$$$ DEFERRED ISSUES $$$$$$$$$$$$$$$

- allow a next register for Call_* and Invoke_* (DEFERRED)

- TypeSet and TypeComposition could be mutated by different threads
    (hence the use of ConcurrentHashMap in TypeSet and synchronization in TypeComposition)

########## TypeConstant assumptions

- TerminalTC.getDefiningConstant() can only be a PropertyConstant or a non-parameterized type

- ParameterizedTC.getDefiningConstant().getIdentityConstant() can only be a ClassConstant

