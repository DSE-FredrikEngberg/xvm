- having two identical methods or properties produces a CompositeComponent for the corresponding Method/PropertyStructure

- conditional multi return method declaration fails to compile, e.g.: "conditional (Int, Int) foo()"

missing ">" causes an NPE
    class C<T>
        into M1<T | M2<T>


-- COMPILER-65: Could not find a matching constructor for type "Ecstasy:BoundsException". ("new BoundsException()")

caused by an automatic (unnecessary) default constructor in addition to a correct constructor
(see TypeInfo.findCallable())

-- COMPILER-65: Could not find a matching constructor for type "Ecstasy:Exception". ("new Exception(s)")

caused by a failure to correctly init a parameter with "markInitialValue"
(see "T0D0" in MethodDeclarationStatement.buildParameters)


-- infinite loop in resolver caused by a missing ">"
 ElementType[] to<ElementType[]() {}


-- generates a "wrong number of arguments" error
  return codepoint < UInt32.maxvalue ? (true, new Char(codepoint + 1)) : false;

-- NPE if ":" is left accidentally
        return s1.estimateStringLength() :  +
               s2.estimateStringLength() + 2;

-- add this to Number.x and the hell breaks loose:
    @Override
    Number[] to<Number[]>();

-- "this.new Child()"" doesn't parse correctly, while "x.new Child()" does

-- a naked lambda body cannot have a ternary; the error reporting is extremely confusing
    ElementType[] that = new ElementType[this.size + that.size,
        (i) -> i < this.size ? this[i] : that[i-this.size]];

